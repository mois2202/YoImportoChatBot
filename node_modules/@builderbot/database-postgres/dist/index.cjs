"use strict";var t=require("@builderbot/bot"),n=require("pg");class e extends t.MemoryDB{constructor(t){super(),this.listHistory=[],this.credentials={host:"localhost",user:"",database:"",password:null,port:5432},this.credentials=t,this.init().then()}async init(){try{const t=new n.Pool(this.credentials),e=await t.connect();return this.db=e,console.log("ðŸ†— Successful DB Connection"),this.checkTableExistsAndSP(),!0}catch(t){throw console.log("Error",t),t}}async getPrevByNumber(t){try{const n=(await this.db.query("SELECT * FROM public.history WHERE phone = $1 ORDER BY created_at DESC LIMIT 1",[t])).rows[0];return n&&(n.refSerialize=n.refserialize,delete n.refserialize),n}catch(t){throw console.error("Error getting previous entry by number:",t),t}}async save(t){const n=[t.ref,t.keyword,t.answer,t.refSerialize,t.phone,JSON.stringify(t.options)];try{await this.db.query("SELECT save_or_update_history_and_contact($1, $2, $3, $4, $5, $6)",n)}catch(t){throw console.error("Error registering history entry:",t),t}this.listHistory.push(t)}async getContact(t){const n=t.phone;try{return(await this.db.query("SELECT * FROM public.contact WHERE phone = $1 LIMIT 1",[n])).rows[0]}catch(t){throw console.error("Error getting contact by number:",t.message),t}}async saveContact(t){const n=await this.getContact(t);let e={};e="a"===(t?.action??"a")?{...n?.values,...t?.values??{}}:t?.values??{};const r=[t.from,JSON.stringify(e)];try{await this.db.query("SELECT save_or_update_contact($1, $2)",r)}catch(t){throw console.error("ðŸš« Error saving or updating contact:",t),t}}async checkTableExistsAndSP(){try{await this.db.query("\n            CREATE TABLE IF NOT EXISTS contact (\n                id SERIAL PRIMARY KEY,\n                phone VARCHAR(255) DEFAULT NULL,\n                created_at TIMESTAMP DEFAULT current_timestamp,\n                updated_in TIMESTAMP,\n                last_interaction TIMESTAMP,\n                values JSONB\n            )")}catch(t){throw console.error("ðŸš« Error creating the contact table:",t),t}try{await this.db.query("\n            CREATE TABLE IF NOT EXISTS history (\n                id SERIAL PRIMARY KEY,\n                ref VARCHAR(255) NOT NULL,\n                keyword VARCHAR(255),\n                answer TEXT NOT NULL,\n                refSerialize TEXT NOT NULL,\n                phone VARCHAR(255) DEFAULT NULL,\n                options JSONB,\n                created_at TIMESTAMP DEFAULT current_timestamp,\n                updated_in TIMESTAMP,\n                contact_id INTEGER REFERENCES contact(id)\n            )")}catch(t){throw console.error("ðŸš« Error creating the history table:",t),t}await this.createSP()}async createSP(){try{await this.db.query('\n        CREATE OR REPLACE FUNCTION save_or_update_contact(\n            in_phone VARCHAR(255),\n            in_values JSONB\n        )\n        RETURNS VOID AS\n        $$\n        DECLARE\n            contact_cursor refcursor := \'cur_contact\';\n            contact_id INT;\n        BEGIN\n            SELECT id INTO contact_id FROM contact WHERE phone = in_phone;\n        \n            IF contact_id IS NULL THEN\n                INSERT INTO contact (phone, "values")\n                VALUES (in_phone, in_values);\n            ELSE\n                UPDATE contact SET "values" = in_values, updated_in = current_timestamp\n                WHERE id = contact_id;\n            END IF;\n        END;\n        $$ LANGUAGE plpgsql;')}catch(t){throw console.error("ðŸš« Error creating the stored procedure for contact:",t),t}try{await this.db.query("\n        CREATE OR REPLACE FUNCTION save_or_update_history_and_contact(\n            in_ref VARCHAR(255),\n            in_keyword VARCHAR(255),\n            in_answer TEXT,\n            in_refserialize TEXT,\n            in_phone VARCHAR(255),\n            in_options JSONB\n        )\n        RETURNS VOID AS\n        $$\n        DECLARE\n            _contact_id INT;\n        BEGIN\n            SELECT id INTO _contact_id FROM contact WHERE phone = in_phone;\n        \n            IF _contact_id IS NULL THEN\n                INSERT INTO contact (phone)\n                VALUES (in_phone)\n                RETURNING id INTO _contact_id;\n            ELSE\n                UPDATE contact SET last_interaction = current_timestamp WHERE id = _contact_id;\n            END IF;\n        \n            INSERT INTO history (ref, keyword, answer, refserialize, phone, options, contact_id, created_at)\n            VALUES (in_ref, in_keyword, in_answer, in_refserialize, in_phone, in_options, _contact_id, current_timestamp);\n        \n        END;\n        $$ LANGUAGE plpgsql;")}catch(t){throw console.error("ðŸš« Error creating the stored procedure for history:",t),t}}}exports.PostgreSQLAdapter=e;
